name: Poll YouTube for Live Streams

on:
  schedule:
    - cron: '0 1 * * *'  # Run at 1:00 AM UTC every day
  repository_dispatch:
    types: [poll-youtube]
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: none
  actions: write

jobs:
  poll-youtube:
    runs-on: ubuntu-latest
    timeout-minutes: 4  # Job will timeout after 4 minutes
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
  
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"
  
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Update streams
      id: update
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
        BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
      run: |
        # Create data directory if it doesn't exist
        mkdir -p public/data
        
        # Run the script with better error handling
        if ! uv run script/update_streams.py; then
          echo "Script failed with exit code $?"
          exit 1
        fi
        
        # Stage the file first so git status works correctly
        git add public/data/streams.json
        
        # Check if there are any changes (including new files)
        if git status --porcelain | grep -q "public/data/streams.json"; then
          echo "Changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push if changed
      if: steps.update.outputs.has_changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git commit -m "Update streams data"
        git push

    - name: Trigger deploy workflow
      if: steps.update.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy.yml',
            ref: 'main'
          })

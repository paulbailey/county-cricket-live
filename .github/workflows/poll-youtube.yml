name: Poll YouTube for Live Streams

on:
  schedule:
    - cron: '10 8-20 * * *'  # At the start of every hour from 8am to 8pm
    - cron: '25 8-20 * * *'  # At 15 minutes past every hour from 8am to 8pm
    - cron: '40 8-20 * * *'  # At 30 minutes past every hour from 8am to 8pm
    - cron: '55 8-20 * * *'  # At 45 minutes past every hour from 8am to 8pm
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: none
  actions: write

jobs:
  poll-youtube:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r script/requirements.txt
    
    - name: Update streams and notify
      id: update
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        BLUESKY_USERNAME: ${{ secrets.BLUESKY_USERNAME }}
        BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
      run: |
        python script/update_and_notify.py
        # Capture the output variables
        echo "has_changes=$(grep '^has_changes=' <<< "$(python script/update_and_notify.py)" | cut -d'=' -f2)" >> $GITHUB_OUTPUT
        echo "has_new_streams=$(grep '^has_new_streams=' <<< "$(python script/update_and_notify.py)" | cut -d'=' -f2)" >> $GITHUB_OUTPUT

    - name: Commit and push if changed
      if: steps.update.outputs.has_changes == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add data/streams.json
        git commit -m "Update streams data"
        git push

    - name: Trigger deploy workflow
      if: steps.update.outputs.has_changes == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy.yml',
            ref: 'main'
          })
